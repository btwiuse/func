syntax = "proto3";

package io.func;

option go_package = "rpc";

service Func {
  // Apply applies resources changes.
  rpc Apply(ApplyRequest) returns (ApplyResponse);
}

// ApplyRequest is the request to send to Apply.
message ApplyRequest {
  // Namespace is the namespace to apply resource changes to.
  string namespace = 1;

  // Config is the configuration to apply.
  //
  // The content should be a json encoded *hclpack.Body.
  bytes config = 2;
}

// ApplyResponse is returned from applying resources.
//
// The response may contain an UploadRequest, in which case the apply is
// rejected due to missing source code. The source code should be uploaded and
// then Apply should be retried.
message ApplyResponse {
  // SourcesRequired is set if source code uploads are required.
  repeated SourceRequest sources_required = 1;
}

// An SourceRequest describes a single upload request.
message SourceRequest {
  // Key is the key of the source code to upload.
  // The digest maps back to a resource in the ApplyRequest config.
  string key = 1;

  // Url is the destination URL to upload to.
  // The request should be done as a HTTP PUT.
  string url = 2;

  // Headers include the additional headers that must be set on the upload.
  map<string, string> headers = 3;
}
